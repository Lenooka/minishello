/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   frees.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: otolmach <otolmach@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/04/13 14:06:39 by otolmach          #+#    #+#             */
/*   Updated: 2024/04/27 20:38:07 by otolmach         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

void	dup_two_error(t_mnshll *minsh, int fd, int *pipe_fd)
{
	if (fd != -123456)
		close(fd);
	if (pipe_fd != NULL)
		close_fd(pipe_fd);
	free_exit_procces(minsh, "Error: dup2 fail!");
}

void	free_heredoc(t_mnshll *minsh)
{
	int	exit_s;

	exit_s = minsh->exit;
	if (minsh->input)
		free(minsh->input);
	if (minsh->com_array)
		free_all_arrays(minsh->com_array);
	if (minsh->envl)
		free_env(minsh->envl);
	close(0);
	close(1);
	if (minsh->fdin != -1)
		close(minsh->fdin);
	if (minsh->fdout != -1)
		close(minsh->fdout);
	if (minsh)
		free(minsh);
	rl_clear_history();
	exit(exit_s);			
}

void	free_cmd_list(t_lexer *cmdlist)
{
	t_lexer	*tmp;
	t_lexer	*head;

	head = cmdlist;
	while (head)
	{
		tmp = head;
		head = head->next;
		if (tmp->tokens)
			free(tmp->tokens);
		free(tmp);
	}
}
void	free_to_main(t_mnshll *minsh)
{
	check_global_end();
	handler_cd(minsh);
	free_exit_procces(minsh, NULL);
}

void	free_exit_procces(t_mnshll *minsh, char *mess)
{
	int	exit_s;

	exit_s = minsh->exit;
	if (minsh->input)
		free(minsh->input);
	free_all_arrays(minsh->com_array);
	if (minsh->envl)
		free_env(minsh->envl);
	close(0);
	close(1);
	close(2);
	if (minsh->fdin != -1)
		close(minsh->fdin);
	if (minsh->fdout != -1)
		close(minsh->fdout);
	if (minsh)
		free(minsh);
	rl_clear_history();
	if (mess != NULL)
		ft_putstr_fd(mess, STDERR_FILENO);
	exit(exit_s);			
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   minishell.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: otolmach <otolmach@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/03/11 16:03:20 by otolmach          #+#    #+#             */
/*   Updated: 2024/04/27 19:55:35 by otolmach         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

int	g_global = 0;

void	setting_to_zero(t_mnshll *mnshll)
{
	mnshll->fdin = -1;
	mnshll->fdout = -1;
	mnshll->exit = 0;
	mnshll->input = NULL;
	mnshll->com_array = NULL;
}

/*if envl fails I free it inside the init*/

int	main(int arc, char **arv, char **env)
{
	t_mnshll	*mnshll;

	if (arc == 1 && arv[1] == NULL)
	{
		mnshll = NULL;
		mnshll = mnshll_init(mnshll, env);
		if (mnshll == NULL)
			return (0);
		setting_to_zero(mnshll);
		while (1)
		{
			make_sigaction();
			mnshll->input = readline("Minishell <3 : ");
			if (mnshll->input == NULL)
				break ;
			if (ft_strlen(mnshll->input) != 0 && mnshll->input[0] != '\0')
				add_history(mnshll->input);
			if (syntax_error(mnshll) == 1 && mnshll->input)
				continue ;
			else if (parser_start(mnshll) != 1)
				minishell(mnshll);
		}
		free_to_main(mnshll);
	}
	return (0);
}
